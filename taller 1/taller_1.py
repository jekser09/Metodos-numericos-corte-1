# -*- coding: utf-8 -*-
"""taller 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C703eXsHipjP6oq9Ce5e2vpZXFfUX2rm

# Taller 1
## Estudiante: Johand Esteban Castro Rodriguez
### Universidad Central
### Ingenieria de Sistemas


![image.png](https://upload.wikimedia.org/wikipedia/commons/thumb/4/49/Triangle_with_notations_2.svg/1200px-Triangle_with_notations_2.svg.png)

#### Semiperimetro: $$S=\frac{a+b+c}{2}$$
#### Area: $$A=\sqrt{s(s-a)(s-b)(s-b)}$$
[Para mas informacion](https://es.wikipedia.org/wiki/F%C3%B3rmula_de_Her%C3%B3n)

### Ejemplo 1:
"""

import math

#Codigo para resolver el ejemplo

print("Ingrese el valor del lado A:")
ladoA=float(input())
print("Lado A =",ladoA,"\n")

print("Ingrese el valor del lado B:")
ladoB=float(input())
print("Lado B =",ladoB,"\n")

print("Ingrese el valor del lado C:")
ladoC=float(input())
print("Lado C =",ladoC,"\n")

s=(ladoA+ladoB+ladoC)/2

print("Semiperimetro = ",s,"\n")

a=math.sqrt(s*(s-ladoA)*(s-ladoB)*(s-ladoC))

a=round(a,2)

print("Area = ",a)

"""## Solucion de ecuaciones cuadraticas por formula general:
Diseñe un programa que permita solucionar cualquier ecuación cuadrática
$ax^2 + bx + c = 0$; Si el usuario introduce las constantes a, b y c se debe mostrar las soluciones con una aproximación de dos cifras decimales.

### Solucion:

$$\text{Para solucionar este problema es necesario usar la formula cuadratica: }x = \frac {-b \pm \sqrt {b^2 - 4ac}}{2a}$$

[Para saber mas sobre la formula cuadratica](https://www.varsitytutors.com/hotmath/hotmath_help/spanish/topics/quadratic-formula#:~:text=0%20%3D%20ax%202%20%2B%20bx%20%2B,entonces%20no%20hay%20soluciones%20reales)
"""

import math
#Punto 1
bandera=False
while bandera==False:
    try:
        print('Ingrese el valor de la variable a: ')
        a=float(input())
        print("Variable A:",a)
        
        print('Ingrese el valor de la variable b: ')
        b=float(input())
        print("Variable B:",b)

        print('Ingrese el valor de la variable c: ')
        c=float(input())
        print("Variable C:",c)

        #Primer valor
        x1=round((-b + math.sqrt(b**2-4*a*c))/(2*a),2)
        #Segundo valor
        x2=round((-b - math.sqrt(b**2-4*a*c))/(2*a),2)
        #resultado        
        print('Las soluciones de dicha ecuacion son:\nx1= ',x1,'\nx2= ',x2)
        bandera=True    
    except ValueError:
        print('La solucion es compleja por favor ingrese nuevos datos\n')

"""## Solucion de ecuaciones cubicas por formula cubica:
Investigue cuál es la fórmula para las soluciones de una ecuación cúbica $ax^3+bx^2+cx+d= 0$ y diseñe un
programa que pida al usuario los coeficientes y calcule las tres raíces de la ecuación (con base en la fórmula).

### Estrategia general del método:
Dada la ecuacion cubica se calculan las siguientes cantidades:
$$p=\frac{3ac-b^2}{3a^2},q=\frac{2b^3-9abc+27a^2d}{27a^3}$$

$$u=\sqrt[3]{-\frac{9}{2}+\sqrt{Δ}},v=\sqrt[3]{-\frac{9}{2}-\sqrt{\Delta}}$$
En ese caso las tres raíces se pueden escribir simplemente como:
$$x_1=u+v-\frac{b}{3a}$$

$$x_2=\left[-\frac{1}{2}(u+v)-\frac{b}{3a}\right]+\left[\frac{\sqrt{3}}{2}(u-v)\right]i$$

$$x_3=\left[-\frac{1}{2}(u+v)-\frac{b}{3a}\right]-\left[\frac{\sqrt{3}}{2}(u-v)\right]i$$

Al ser el discriminante ${\displaystyle \Delta ={\frac {q^{2}}{4}}+{\frac {p^{3}}{27}}}$ se tiene:

a) Una de las raíces es real y dos de ellas son complejas si ${\displaystyle \Delta >0}$.

b) Todas las raíces son reales y al menos dos son iguales si ${\displaystyle \Delta =0}$.

c) Todas las raíces son reales y distintas si ${\displaystyle \Delta <0}$.

[Para mas informacion](https://es.wikipedia.org/wiki/Ecuación_de_tercer_grado).


"""

import math
import numpy as np
print("ingrese el valor de a.")
a=float(input())
print("Variable  a:",a)
print("ingrese el valor de b.")
b=float(input())
print("Variable  b:",b)
print("ingrese el valor de c.")
c=float(input())
print("Variable  c:",c)
print("ingrese el valor de d.")
d=float(input())
print("Variable  d:",d,"\n")

#paso 1:
p=(3*a*c-b**2)/(3*a**2)

print("p:",round(p,2))

#paso 2:
q=(2*b**3-9*a*b*c+27*a**2*d)/(27*a**3)
print("q:",round(q,2))

#paso 3:
# dis = Δ
dis = (q**2/4)+(p**3/27)
print("Δ =",round(dis,2))

#paso 4:
u = np.cbrt(-(q/2)+math.sqrt(dis))
print("u:",round(u,2))

#paso 5:
v = np.cbrt(-(q/2)-math.sqrt(dis))
print("v:",round(v,2),"\n")
#paso 6:
#calcular valor de x1:
x1 = round(u+v-(b/(3*a)),2)

#paso 7:
#cacular valor de x2:
x2 = complex(round(-(1/2)*(u+v)-(b/(3*a)),2),round((math.sqrt(3)/2)*(u-v),2))

#paso 8:
#cacular valor de x3:
x3 = complex(round(-(1/2)*(u+v)-(b/(3*a)),2),round(-((math.sqrt(3)/2)*(u-v)),2))

print("x1=",x1)
print("x2=",x2)
print("x3=",x3)

"""## Ventajas de Jupyer Notebook
- gratuito.
- manejo de datos.
- el analisis de los problemas se puede manejar de manera mas interactiva gracias a que se puede adjuntar ecuaciones, videos, imagenes, figuras etc..
- todo el codigo queda guardado en un solo archivo a diferencia de cuando se maneja un IDE.
- posibilidad de crear interfaz de usuario (UI) con html y javascript.

"""

